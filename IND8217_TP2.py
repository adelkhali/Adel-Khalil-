# -*- coding: utf-8 -*-
"""Devoir #2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Bp1W9nhULs9-opBRjPJBeMvX1lARVhW
"""

import numpy as np
_lambda=122
_k=1.5

# define the F(t) function 
def F(t):
  return 1-np.exp(-(t/_lambda)**_k)

# define the R(t) function 
def R(t):
  return 1-F(t)

# define the density function 
def f(t):
  return (_k*t**(_k-1)/_lambda**_k)*np.exp(-(t/_lambda)**_k)


# define the integration function 
# integrate from 0 to tp
# https://docs.scipy.org/doc/scipy/reference/tutorial/integrate.html
from scipy import integrate 

def int_tp(tp):
  return integrate.quad(lambda t: t*f(t), 0,tp)[0]

int_tp(10)

#define the gamma function calculation

from math import gamma
def E():
   return _lambda*gamma(1+1/_k)

E(),int_tp(1)

"""#**A. Replacement at fixed age**

**1.	Minimize the cost of operation**
"""

#Cp_a1=42*2*7+240 #cost of labor/h=42 & for two tech Tp=7h & cost of sparparts=2x120 
#Cf_a1=60*2*7+240 #cost of labor/h=42+18 & for two tech Tp=7h & cost of sparparts=2x120 
Cp_a1=42*4*3+240 #cost of labor/h=42 & for 4 tech Tp=3h & cost of sparparts=2x120 
Cf_a1=60*4*3+240 #cost of labor/h=42+18 & for 4 tech Tp=3h & cost of sparparts=2x120
#Minimizing costs ‚Äì replacement at a fixed age  ùë°ùëù
def C_fixedage(tp, Cp, Cf):
  return (Cp*R(tp)+Cf*F(tp))/(tp*R(tp)+int_tp(tp))

# define the minimzation function #https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.minimize.html

from scipy.optimize import minimize
minimize(C_fixedage, [10], args=(Cp_a1,Cf_a1), method="SLSQP", bounds=[(1,None)]) # the [10] is the initial guess, can be anything

"""**2. Minimizing downtime **"""

#Cp_a2=42*4*3+240 #cost of labor/h=42 & forfour tech Tp=3h & cost of sparparts=2x120 
#Cf_a2=60*4*3+240 #cost of labor/h=42+18 & for four tech Tp=3h & cost of sparparts=2x120 
#Minimizing downtime ‚Äì replacement at a fixed age
Tp_a2=3/24  # DT due to preventive replacment for 4 tech in days
Tf_a2=(3+4)/24   # DT due to Failure replacment for 4 tech in days
def DT_fixedage(tp,Tp, Tf):
  #Tp: stop time to make preventive replacment
  return (Tp*R(tp)+Tf*F(tp))/((tp+Tp)*R(tp)+int_tp(tp))

# define the minimzation function downtime
from scipy.optimize import minimize
minimize(DT_fixedage, [10], args=(Tp_a2,Tf_a2), method="SLSQP", bounds=[(1,None)]) # the [10] is the initial guess, can be anything

DT_fixedage(50,Tp_a2,Tf_a2)
R(50)

"""# **B. Replacement at a fixed interval **

**1.	Minimize the cost of operation**
"""

Cp_b1=42*0.7*4*3+240 #cost of labor/h=42*0.7 & forfour tech Tp=3h & cost of sparparts=2x120    & labour cost is 70 %
Cf_b1=60*0.7*4*3+240 #cost of labor/h=(42+18)*0.7 & for four tech Tp=3h & cost of sparparts=2x120 
import numpy as np
#Minimizing costs ‚Äì replacement at a fixed interval 
def Lamda_b1(t):
  return (t/462)**3.28

def M(t):
  return integrate.quad(lambda t: (t/462)**3.28, 0,t)[0]


def C_fixinterval(tp, Cp_b1, Cf_b1):
  return (Cp_b1+Cf_b1*M(tp))/(tp)

M(10)

# define the minimzation function downtime
from scipy.optimize import minimize
minimize(C_fixinterval, [10], args=(Cp_b1,Cf_b1), method="SLSQP", bounds=[(1,None)]) # the [10] is the initial guess, can be anything

"""**2. Minimizing downtime **"""

Tp_b2=3/24  # DT due to preventive replacment for 4 tech in days
Tf_b2=(3+4)/24   # DT due to Failure replacment for 4 tech in days
def DT_fixinterval(tp,Tp, Tf):
  #Tp: stop time to make preventive replacment
  return (Tf*M(tp)+Tp)/(tp+Tp)

# define the minimzation function downtime
from scipy.optimize import minimize
minimize(DT_fixinterval, [10], args=(Tp_b2,Tf_b2), method="SLSQP", bounds=[(1,None)]) # the [10] is the initial guess, can be anythin

# import the library required for making plot 
from matplotlib import pyplot as plt

total_cost_fixedge=[]
total_cost_fixinterval=[]
DT_fixedge=[]
DT_fixinterval=[]
for tp in range (1,365):
  total_cost_fixedge.append(C_fixedage(tp,Cp_a1,Cf_a1))
  total_cost_fixinterval.append(C_fixinterval(tp, Cp_b1, Cf_b1))
  DT_fixedge.append(DT_fixedage(tp,Tp_a2, Tf_a2))
  DT_fixinterval.append((Tf_b2*M(tp)+Tp_b2)/(tp+Tp_b2))

plt.plot(total_cost_fixedge)
plt.title("total_cost_fixedge")

plt.plot(total_cost_fixinterval)
plt.title("total_cost_fixinterval")

plt.plot(DT_fixedge)

plt.title("DT_fixedge")

plt.plot(DT_fixinterval)
plt.title("DT_fixinterval")

"""#spare parts in fixedge"""

# tp_DT_fixedge=191.8956648 
num_spar_parts_fixedge_DT=(1*2*365)/(191.8956648 *R(191.8956648 )+int_tp(191.8956648 ))  
print(num_spar_parts_fixedge)

# tp_Cp_fixedge=691.65030684
num_spar_parts_fixedge_DT=(1*2*365)/(691.65030684*R(691.65030684)+int_tp(691.65030684))  
print("num_spar_parts_fixedge=",num_spar_parts_fixedge)

print("Cost_spar_part_fixedge=",9*120,"$")

"""#spare parts in fixInterval"""

# tp_DT_fixedge=96.08902769 
num_spar_parts_fixinterval=(1*2*365)*(1+M(96.08902769 ))/96.08902769 
print("num_spar_parts_fixinterval=",num_spar_parts_fixinterval)

# tp_Cp_fixedge=111.174
num_spar_parts_fixinterval=(1*2*365)*(1+M(111.174 ))/111.174 
print("num_spar_parts_fixinterval=",num_spar_parts_fixinterval)

print("Cost_spar_part_fixinterval=",9*120,"$")